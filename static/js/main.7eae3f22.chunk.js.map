{"version":3,"sources":["components/Navigation/Navigation.tsx","components/ArrayBar/ArrayBar.tsx","containers/Array/Array.tsx","components/ButtonToolbar/ButtonToolbar.tsx","algorithms/Bubble.tsx","algorithms/Insertion.tsx","algorithms/Merge.tsx","algorithms/Quick.tsx","algorithms/Selection.tsx","App.tsx","index.tsx"],"names":["Navigation","isSorting","currentAlgo","onSortSelect","speed","className","disabled","onClick","ArrayBars","height","color","style","backgroundColor","Array","array","compare","swap","sorted","map","num","index","barColor","includes","ButtonToolbar","onArrayReset","onSpeedIncrease","onSpeedDecrease","onSort","bubbleSort","j","arr","slice","algorithmSteps","i","length","push","_","require","insertionSort","range","mergeSortHelper","left","right","mid","Math","floor","mergedArr","firstIndex","secondIndex","forEach","element","merge","mergeSort","quickSortHelper","start","end","p","pivotIndex","finalPivot","partition","quickSort","selectionSort","minIndex","App","useState","setCurrentAlgo","setArray","setCompare","setSwap","setSorted","setIsSorting","setSpeed","speedText","setSpeedText","useEffect","resetArray","random","sortHelper","setTimeout","first","second","swappedArr","finished","prevState","algorithm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7eae3f22.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navigation.css\";\r\n\r\ninterface NavigationProps {\r\n  isSorting: boolean;\r\n  currentAlgo: string;\r\n  onSortSelect: (algorithm: string) => void;\r\n  speed: string;\r\n}\r\n\r\nconst Navigation = ({\r\n  isSorting,\r\n  currentAlgo,\r\n  onSortSelect,\r\n  speed,\r\n}: NavigationProps) => {\r\n  return (\r\n    <nav>\r\n      <h1>Sorting Visualizer</h1>\r\n      <div>\r\n        <button\r\n          className={currentAlgo === \"Bubble\" ? \"selected-btn\" : \"nav-btn\"}\r\n          disabled={isSorting}\r\n          onClick={() => onSortSelect(\"Bubble\")}\r\n        >\r\n          Bubble\r\n        </button>\r\n        <button\r\n          className={currentAlgo === \"Selection\" ? \"selected-btn\" : \"nav-btn\"}\r\n          disabled={isSorting}\r\n          onClick={() => onSortSelect(\"Selection\")}\r\n        >\r\n          Selection\r\n        </button>\r\n        <button\r\n          className={currentAlgo === \"Insertion\" ? \"selected-btn\" : \"nav-btn\"}\r\n          disabled={isSorting}\r\n          onClick={() => onSortSelect(\"Insertion\")}\r\n        >\r\n          Insertion\r\n        </button>\r\n        <button\r\n          className={currentAlgo === \"Merge\" ? \"selected-btn\" : \"nav-btn\"}\r\n          disabled={isSorting}\r\n          onClick={() => onSortSelect(\"Merge\")}\r\n        >\r\n          Merge\r\n        </button>\r\n        <button\r\n          className={currentAlgo === \"Quick\" ? \"selected-btn\" : \"nav-btn\"}\r\n          disabled={isSorting}\r\n          onClick={() => onSortSelect(\"Quick\")}\r\n        >\r\n          Quick\r\n        </button>\r\n      </div>\r\n\r\n      <div>Speed: {speed}</div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport \"./ArrayBar.css\";\r\n\r\ninterface ArrayBarProps {\r\n  height: number;\r\n  color: string;\r\n}\r\n\r\nconst ArrayBars = ({ height, color }: ArrayBarProps) => {\r\n  return (\r\n    <div\r\n      className=\"bar\"\r\n      style={{ height: `${height}px`, backgroundColor: `${color}` }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default ArrayBars;\r\n","import React from \"react\";\r\nimport ArrayBar from \"../../components/ArrayBar/ArrayBar\";\r\n\r\nimport \"./Array.css\";\r\n\r\ninterface ArrayProps {\r\n  array: number[];\r\n  compare: number[];\r\n  swap: number[];\r\n  sorted: number[];\r\n}\r\n\r\nconst Array = ({ array, compare, swap, sorted }: ArrayProps) => {\r\n  return (\r\n    <div className=\"array\">\r\n      {array.map((num, index) => {\r\n        let barColor = \"#b8faff\";\r\n        if (compare && (index === compare[0] || index === compare[1])) {\r\n          barColor = \"#faffb8\";\r\n        }\r\n\r\n        if (swap && (index === swap[0] || index === swap[1])) {\r\n          barColor = \"#ff7d7d\";\r\n        }\r\n\r\n        if (sorted && sorted.includes(index)) {\r\n          barColor = \"#94ff9f\";\r\n        }\r\n\r\n        return <ArrayBar key={index} height={num} color={barColor} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Array;\r\n","import React from \"react\";\r\nimport \"./ButtonToolbar.css\";\r\n\r\ninterface ButtonToolBarProps {\r\n  isSorting: boolean;\r\n  onArrayReset: () => void;\r\n  onSpeedIncrease: () => void;\r\n  onSpeedDecrease: () => void;\r\n  onSort: () => void;\r\n}\r\n\r\nconst ButtonToolbar = ({\r\n  isSorting,\r\n  onArrayReset,\r\n  onSpeedIncrease,\r\n  onSpeedDecrease,\r\n  onSort,\r\n}: ButtonToolBarProps) => {\r\n  return (\r\n    <footer className=\"toolbar\">\r\n      <button\r\n        className=\"toolbar-btn\"\r\n        disabled={isSorting}\r\n        onClick={onSpeedDecrease}\r\n      >\r\n        <i className=\"fas fa-2x fa-fast-backward\"></i>\r\n      </button>\r\n      <button\r\n        className=\"toolbar-btn\"\r\n        disabled={isSorting}\r\n        onClick={onArrayReset}\r\n      >\r\n        <i className=\"fas fa-2x fa-sync-alt\"></i>\r\n      </button>\r\n      <button \r\n        className=\"toolbar-btn\" \r\n        disabled={isSorting} \r\n        onClick={onSort}\r\n      >\r\n        <i className=\"fas fa-2x fa-play\"></i>\r\n      </button>\r\n      <button\r\n        className=\"toolbar-btn\"\r\n        disabled={isSorting}\r\n        onClick={onSpeedIncrease}\r\n      >\r\n        <i className=\"fas fa-2x fa-fast-forward\"></i>\r\n      </button>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default ButtonToolbar;\r\n","/**\r\n * Function that performs Bubble Sort on an array\r\n * @param array Array of numbers to be sorted\r\n * @returns Array of indices representing steps in the sorting process\r\n */\r\nconst bubbleSort = (array: number[]) => {\r\n  const arr = array.slice(); // Make a copy of the array so the state array does not get mutated\r\n  const algorithmSteps = [];\r\n\r\n  let j: number;\r\n\r\n  // Loop through length - 2 times, because the first element will automatically be sorted\r\n  for (let i = 0; i < arr.length - 1; i++) {\r\n    // Last i elements are already sorted\r\n    for (j = 0; j < arr.length - 1 - i; j++) {\r\n      algorithmSteps.push([j, j + 1, null, null]); // Get indices of elements being compared\r\n      if (arr[j] > arr[j + 1]) {\r\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\r\n        algorithmSteps.push([j, j + 1, arr.slice(), null]); // Get indices of elements being swapped and resulting array\r\n      }\r\n    }\r\n    algorithmSteps.push([null, null, null, j]); // Get index of sorted element\r\n\r\n    if (j === 1) algorithmSteps.push([null, null, null, j - 1]); // Make sure remaining element of array is marked sorted\r\n  }\r\n\r\n  return algorithmSteps;\r\n};\r\n\r\nexport default bubbleSort;\r\n","const _ = require(\"lodash\");\r\n\r\n/**\r\n * Function that performs Insertion Sort on an array\r\n * @param array Array of numbers to be sorted\r\n * @returns Array of indices representing steps in the sorting process\r\n */\r\nconst insertionSort = (array: number[]) => {\r\n  const arr = array.slice(); // Make a copy of the array so the state array does not get mutated\r\n  let algorithmSteps = [];\r\n\r\n  // Loop through entire array, starting from second element\r\n  for (let i = 1; i < arr.length; i++) {\r\n    // Pass through elements to the left of current, swapping if current is smaller\r\n    for (let j = i; j > 0; j--) {\r\n      algorithmSteps.push([j, j - 1, null, null]); // Get indices of elements being compared\r\n      if (arr[j] < arr[j - 1]) {\r\n        [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]];\r\n        algorithmSteps.push([j, j - 1, arr.slice(), null]); // Get indices of elements being swapped and resulting array\r\n      } else {\r\n        // No need to finish checking all elements to the left\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  algorithmSteps.push([null, null, null, _.range(arr.length)]); // Get indices of all elements to mark as sorted\r\n  return algorithmSteps;\r\n};\r\n\r\nexport default insertionSort;\r\n","const _ = require(\"lodash\");\r\n\r\nlet algorithmSteps: any[] = [];\r\n\r\n/**\r\n * Function that merges two arrays in sorted order\r\n * @param array Array to merge\r\n * @param left Leftmost index\r\n * @param mid Middle index\r\n * @param right Rightmost index\r\n */\r\nconst merge = (array: number[], left: number, mid: number, right: number) => {\r\n  const mergedArr = [];\r\n\r\n  let firstIndex = left; // Starting index of first half (left half)\r\n  let secondIndex = mid + 1; // Starting index of second half (right half)\r\n\r\n  // Merge elements in left/right halves of the array in sorted order\r\n  while (firstIndex <= mid && secondIndex <= right) {\r\n    algorithmSteps.push([firstIndex, secondIndex, null, null]); // Get indices of elements being compared\r\n    if (array[firstIndex] <= array[secondIndex]) {\r\n      mergedArr.push(array[firstIndex]);\r\n      firstIndex++;\r\n    } else {\r\n      mergedArr.push(array[secondIndex]);\r\n      secondIndex++;\r\n    }\r\n  }\r\n\r\n  // Add remaining elements (if any) of first sub-array (left half) to merged array\r\n  while (firstIndex <= mid) {\r\n    algorithmSteps.push([firstIndex, null, null, null]); // Get index of element being added\r\n    mergedArr.push(array[firstIndex]);\r\n    firstIndex++;\r\n  }\r\n\r\n  // Add remaining elements (if any) of second sub-array (right half) to merged array\r\n  while (secondIndex <= right) {\r\n    algorithmSteps.push([null, secondIndex, null, null]); // Get index of element being added\r\n    mergedArr.push(array[secondIndex]);\r\n    secondIndex++;\r\n  }\r\n\r\n  // Replace the elements between left/right on the original array with the sorted, merged array\r\n  let i = left;\r\n  mergedArr.forEach((element) => {\r\n    array[i++] = element;\r\n    algorithmSteps.push([i, null, array.slice(), null]); // Get index of element being replaced\r\n  });\r\n};\r\n\r\n/**\r\n * Function that recursively performs merge sort on an array\r\n * @param array Array of numbers to be sorted\r\n * @param left The leftmost index\r\n * @param right The rightmost index\r\n * @returns\r\n */\r\nconst mergeSortHelper = (array: number[], left: number, right: number) => {\r\n  if (left >= right) return; // If left is equal to right, array is only one element, so stop\r\n\r\n  const mid = Math.floor((left + right) / 2);\r\n  mergeSortHelper(array, left, mid);\r\n  mergeSortHelper(array, mid + 1, right);\r\n  merge(array, left, mid, right);\r\n};\r\n\r\n/**\r\n * Function that performs merge sort on an array\r\n * @param array Array of numbers to be sorted\r\n * @returns Array of indices representings steps in the sorting process\r\n */\r\nconst mergeSort = (array: number[]) => {\r\n  const arr = array.slice();\r\n\r\n  // Clear global variable before each run\r\n  algorithmSteps = [];\r\n  mergeSortHelper(arr, 0, arr.length - 1);\r\n\r\n  algorithmSteps.push([null, null, null, _.range(arr.length)]); // All elements will be sorted after the sort runs\r\n  return algorithmSteps;\r\n};\r\n\r\nexport default mergeSort;\r\n","let algorithmSteps: any[] = [];\r\n\r\n/**\r\n * Function that partitions an array into elements less than a pivot and elements greater than a pivot\r\n * @param array Array to partition\r\n * @param start The starting index to partition from\r\n * @param end The ending index to partition from\r\n * @returns The index position of the partition\r\n */\r\nconst partition = (array: number[], start: number, end: number) => {\r\n  const pivotIndex = end; // Pick the last element to be the pivot\r\n  let finalPivot = start;\r\n\r\n  // Loop through all elements, moving elements smaller than the pivot towards the left of the array\r\n  for (let i = start; i < end; i++) {\r\n    algorithmSteps.push([i, pivotIndex, null, null]); // Get indices of elements being compared\r\n    if (array[i] < array[pivotIndex]) {\r\n      [array[i], array[finalPivot]] = [array[finalPivot], array[i]];\r\n      algorithmSteps.push([i, finalPivot, array.slice(), null]); // Get indices of elements being swapped and resulting array\r\n      finalPivot++; // Increment final pivot index whenever there is an element smaller\r\n    }\r\n  }\r\n\r\n  // Swap the final pivot position element with the initial pivot value\r\n  [array[finalPivot], array[pivotIndex]] = [\r\n    array[pivotIndex],\r\n    array[finalPivot],\r\n  ];\r\n  algorithmSteps.push([finalPivot, pivotIndex, array.slice(), null]); // Get indices of elements being swapped and resulting array\r\n  algorithmSteps.push([null, null, null, finalPivot]); // Get index of the final pivot position (automatically sorted)\r\n  return finalPivot;\r\n};\r\n\r\n/**\r\n * Function that recursively performs quick sort on an array\r\n * @param array Array of numbers to be sorted\r\n * @param start The starting index\r\n * @param end The ending index\r\n * @returns\r\n */\r\nconst quickSortHelper = (array: number[], start: number, end: number) => {\r\n  if (start >= end) {\r\n    // When start is equal to end (array is only 1 element) it is automatically sorted, so no need to partition\r\n    if (start === end) algorithmSteps.push([null, null, null, start]);\r\n    return;\r\n  }\r\n\r\n  let p = partition(array, start, end);\r\n  quickSortHelper(array, start, p - 1);\r\n  quickSortHelper(array, p + 1, end);\r\n};\r\n\r\n/**\r\n * Function that performs quick sort on an array\r\n * @param array Array of numbers to be sorted\r\n * @returns Array of indices representings steps in the sorting process\r\n */\r\nconst quickSort = (array: number[]) => {\r\n  const arr = array.slice();\r\n\r\n  // Clear global variable before each run\r\n  algorithmSteps = [];\r\n  quickSortHelper(arr, 0, arr.length - 1);\r\n\r\n  return algorithmSteps;\r\n};\r\n\r\nexport default quickSort;\r\n","/**\r\n * Function that performs Selection Sort on an array\r\n * @param array Array of numbers to be sorted\r\n * @returns Array of indices representing steps in the sorting process\r\n */\r\nconst selectionSort = (array: number[]) => {\r\n  const arr = array.slice(); // Make a copy of the array so the state array does not get mutated\r\n  const algorithmSteps = [];\r\n\r\n  // Loop through length - 2 times, because the last element will automatically be sorted\r\n  for (let i = 0; i < arr.length - 1; i++) {\r\n    let minIndex = i;\r\n    // First element of pass through is marked as min, so start with next element\r\n    for (let j = i + 1; j < arr.length; j++) {\r\n      algorithmSteps.push([minIndex, j, null, null]); // Get indices of current min and comparison\r\n      if (arr[minIndex] > arr[j]) {\r\n        minIndex = j;\r\n      }\r\n    }\r\n    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\r\n    algorithmSteps.push([i, minIndex, arr.slice(), null]); // Get indices of elements being swapped and resulting array\r\n    algorithmSteps.push([null, null, null, i]); // Get index of sorted element\r\n\r\n    if (i === arr.length - 2) algorithmSteps.push([null, null, null, i + 1]); // Make sure remaining element of array is marked sorted\r\n  }\r\n  return algorithmSteps;\r\n};\r\n\r\nexport default selectionSort;\r\n","import React, { useEffect, useState } from \"react\";\n\n// Components\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Array from \"./containers/Array/Array\";\nimport ButtonToolbar from \"./components/ButtonToolbar/ButtonToolbar\";\n\n// Algorithms\nimport bubbleSort from \"./algorithms/Bubble\";\nimport insertionSort from \"./algorithms/Insertion\";\nimport mergeSort from \"./algorithms/Merge\";\nimport quickSort from \"./algorithms/Quick\";\nimport selectionSort from \"./algorithms/Selection\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [currentAlgo, setCurrentAlgo] = useState(\"Bubble\");\n  const [array, setArray] = useState<number[]>([]);\n  const [compare, setCompare] = useState<number[]>([]); // everytime two elements are being compared, set them to the compared\n  const [swap, setSwap] = useState<number[]>([]); // when two elements are to be swapped, set them to swap\n  const [sorted, setSorted] = useState<number[]>([]); // Whenever an element is sorted, append to the sorted state\n  const [isSorting, setIsSorting] = useState(false);\n  const [speed, setSpeed] = useState(300);\n  const [speedText, setSpeedText] = useState(\"0\");\n\n  useEffect(() => {\n    resetArray();\n  }, [currentAlgo]);\n\n  useEffect(() => {\n    switch (speed) {\n      case 100:\n        setSpeedText(\"+2\");\n        break;\n      case 200:\n        setSpeedText(\"+1\");\n        break;\n      case 300:\n        setSpeedText(\"+0\");\n        break;\n      case 400:\n        setSpeedText(\"-1\");\n        break;\n      case 500:\n        setSpeedText(\"-2\");\n    }\n  }, [speed]);\n\n  const resetArray = () => {\n    const arr = [];\n    for (let i = 0; i < 10; i++) {\n      arr.push(Math.floor(Math.random() * 500) + 5);\n    }\n    setArray(arr);\n    setCompare([]);\n    setSwap([]);\n    setSorted([]);\n  };\n\n  const handleSortSelection = (algorithm: string) => {\n    setCurrentAlgo(algorithm);\n  };\n\n  const handleArrayReset = () => {\n    resetArray();\n  };\n\n  const handleSpeedIncrease = () => {\n    if (speed > 100) {\n      setSpeed(speed - 100);\n    }\n  };\n\n  const handleSpeedDecrease = () => {\n    if (speed < 500) {\n      setSpeed(speed + 100);\n    }\n  };\n\n  const sortHelper = (arr: any[]) => {\n    for (let i = 0; i < arr.length; i++) {\n      setTimeout(() => {\n        const [first, second, swappedArr, finished] = arr[i];\n        setSwap([]);\n        setCompare([first, second]);\n\n        if (swappedArr !== null) {\n          setArray(swappedArr);\n          if (first !== null || second !== null) {\n            setSwap([first, second]);\n          }\n        }\n\n        if (finished !== null) {\n          finished.length > 1\n            ? setSorted((prevState) => [...prevState, ...finished])\n            : setSorted((prevState) => [...prevState, finished]);\n        }\n\n        if (i === arr.length - 1) setIsSorting(false);\n      }, i * speed);\n    }\n  };\n\n  const handleSort = () => {\n    setIsSorting(true);\n    switch (currentAlgo) {\n      case \"Bubble\":\n        sortHelper(bubbleSort(array));\n        break;\n      case \"Insertion\":\n        sortHelper(insertionSort(array));\n        break;\n      case \"Merge\":\n        sortHelper(mergeSort(array));\n        break;\n      case \"Quick\":\n        sortHelper(quickSort(array));\n        break;\n      case \"Selection\":\n        sortHelper(selectionSort(array));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navigation\n        isSorting={isSorting}\n        currentAlgo={currentAlgo}\n        onSortSelect={handleSortSelection}\n        speed={speedText}\n      />\n      <Array array={array} compare={compare} swap={swap} sorted={sorted} />\n      <ButtonToolbar\n        isSorting={isSorting}\n        onArrayReset={handleArrayReset}\n        onSpeedIncrease={handleSpeedIncrease}\n        onSpeedDecrease={handleSpeedDecrease}\n        onSort={handleSort}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}